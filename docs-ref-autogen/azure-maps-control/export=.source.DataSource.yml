### YamlMime:TSType
name: DataSource
uid: azure-maps-control.export=.source.DataSource
package: azure-maps-control
summary: >-
  A data source class that makes it easy to manage shapes data that will be
  displayed on the map.

  A data source must be added to a layer before it is visible on the map.

  The DataSource class may be used with the SymbolLayer, LineLayer,
  PolygonLayer, BubbleLayer, and HeatMapLayer.
fullName: DataSource
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: DataSource(string, DataSourceOptions)
    uid: azure-maps-control.export=.source.DataSource.constructor
    package: azure-maps-control
    summary: >-
      A data source class that makes it easy to manage shapes data that will be
      displayed on the map.

      A data source must be added to a layer before it is visible on the map.

      The `DataSource` class may be used with the `SymbolLayer`, `LineLayer`,
      `PolygonLayer`, `BubbleLayer`, and `HeatMapLayer`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new DataSource(id?: string, options?: DataSourceOptions)'
      parameters:
        - id: id
          type: string
          description: >-
            a unique id that the user assigns to the data source. If this is not
            specified, then the data source will automatically be assigned an
            id.
        - id: options
          type: <xref uid="azure-maps-control.export" />=.DataSourceOptions
          description: the options for the data source.
inheritedMethods:
  - name: getId()
    uid: azure-maps-control.export=.source.DataSource.getId
    package: azure-maps-control
    summary: Gets the id of the data source
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getId(): string'
      return:
        description: ''
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [Source.getId](xref:azure-maps-control.export=.source.Source.getId)
methods:
  - name: >-
      add(FeatureCollection | Geometry | Feature<Geometry, any> | Shape |
      GeometryCollection | (Geometry | Feature<Geometry, any> | Shape)[],
      number)
    uid: azure-maps-control.export=.source.DataSource.add
    package: azure-maps-control
    summary: >-
      Adds shapes to the data source.

      GeoJSON objects will be wrapped within a Shape class to make them easier
      to manage.

      Optionally specify an index to insert the feature between other
      shapes/features in the layers.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function add(data: FeatureCollection | Geometry | Feature<Geometry, any>
        | Shape | GeometryCollection | (Geometry | Feature<Geometry, any> |
        Shape)[], index?: number)
      parameters:
        - id: data
          type: >-
            <xref uid="azure-maps-control.export" />=.<xref
            uid="data.FeatureCollection" /> | <xref
            uid="azure-maps-control.export" />=.<xref uid="data.Geometry" /> |
            <xref uid="azure-maps-control.export" />=.<xref uid="data.Feature"
            />&lt;<xref uid="azure-maps-control.export" />=.<xref
            uid="data.Geometry" />, any&gt; | <xref
            uid="azure-maps-control.export" />=.Shape | <xref
            uid="azure-maps-control.export" />=.<xref
            uid="data.GeometryCollection" /> | (<xref
            uid="azure-maps-control.export" />=.<xref uid="data.Geometry" /> |
            <xref uid="azure-maps-control.export" />=.<xref uid="data.Feature"
            />&lt;<xref uid="azure-maps-control.export" />=.<xref
            uid="data.Geometry" />, any&gt; | <xref
            uid="azure-maps-control.export" />=.Shape)[]
          description: ''
        - id: index
          type: number
          description: ''
  - name: clear()
    uid: azure-maps-control.export=.source.DataSource.clear
    package: azure-maps-control
    summary: Removes all data in the data source.
    remarks: ''
    isDeprecated: false
    syntax:
      content: function clear()
  - name: dispose()
    uid: azure-maps-control.export=.source.DataSource.dispose
    package: azure-maps-control
    summary: Cleans up any resources this object is consuming.
    remarks: ''
    isDeprecated: false
    syntax:
      content: function dispose()
  - name: getClusterChildren(number)
    uid: azure-maps-control.export=.source.DataSource.getClusterChildren
    package: azure-maps-control
    summary: >-
      Retrieves the children of the given cluster on the next zoom level. This
      may be a combination of shapes and sub-clusters.

      The sub-clusters will be features with properties matching
      ClusteredProperties.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterChildren(clusterId: number):
        Promise<(Feature<Geometry, any> | Shape)[]>
      parameters:
        - id: clusterId
          type: number
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;(<xref uid="azure-maps-control.export" />=.<xref
          uid="data.Feature" />&lt;<xref uid="azure-maps-control.export"
          />=.<xref uid="data.Geometry" />, any&gt; | <xref
          uid="azure-maps-control.export" />=.Shape)[]&gt;
  - name: getClusterExpansionZoom(number)
    uid: azure-maps-control.export=.source.DataSource.getClusterExpansionZoom
    package: azure-maps-control
    summary: >-
      Calculates a zoom level at which the cluster will start expanding or break
      apart.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getClusterExpansionZoom(clusterId: number): Promise<number>'
      parameters:
        - id: clusterId
          type: number
          description: ''
      return:
        description: ''
        type: Promise&lt;number&gt;
  - name: getClusterLeaves(number, number, number)
    uid: azure-maps-control.export=.source.DataSource.getClusterLeaves
    package: azure-maps-control
    summary: Retrieves shapes that are within the cluster.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterLeaves(clusterId: number, limit: number, offset:
        number): Promise<(Feature<Geometry, any> | Shape)[]>
      parameters:
        - id: clusterId
          type: number
          description: ''
        - id: limit
          type: number
          description: >-
            The maximum number of features to return. Set to Infinity to return
            all shapes.
        - id: offset
          type: number
          description: >-
            The number of shapes to skip. Allows you to page through the shapes
            in the cluster.
      return:
        description: ''
        type: >-
          Promise&lt;(<xref uid="azure-maps-control.export" />=.<xref
          uid="data.Feature" />&lt;<xref uid="azure-maps-control.export"
          />=.<xref uid="data.Geometry" />, any&gt; | <xref
          uid="azure-maps-control.export" />=.Shape)[]&gt;
  - name: getOptions()
    uid: azure-maps-control.export=.source.DataSource.getOptions
    package: azure-maps-control
    summary: Gets the options used by the data source.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getOptions(): DataSourceOptions'
      return:
        description: ''
        type: <xref uid="azure-maps-control.export" />=.DataSourceOptions
  - name: getShapeById(string | number)
    uid: azure-maps-control.export=.source.DataSource.getShapeById
    package: azure-maps-control
    summary: >-
      Retrieves a shape with the specified id.

      If no shape with the specified id is contained in the data source, null
      will be return.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getShapeById(id: string | number): Shape'
      parameters:
        - id: id
          type: string | number
          description: The id of the shape to return.
      return:
        description: ''
        type: <xref uid="azure-maps-control.export" />=.Shape
  - name: getShapes()
    uid: azure-maps-control.export=.source.DataSource.getShapes
    package: azure-maps-control
    summary: Returns all shapes that are in the DataSource.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getShapes(): Shape[]'
      return:
        description: ''
        type: <xref uid="azure-maps-control.export" />=.Shape[]
  - name: importDataFromUrl(string)
    uid: azure-maps-control.export=.source.DataSource.importDataFromUrl
    package: azure-maps-control
    summary: |-
      Downloads a GeoJSON document and imports its data into the data source.
      The GeoJSON document must be on the same domain or accessible using CORS.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function importDataFromUrl(url: string): Promise<void>'
      parameters:
        - id: url
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: >-
      remove(string | number | Feature<Geometry, any> | Shape | (string | number
      | Feature<Geometry, any> | Shape)[])
    uid: azure-maps-control.export=.source.DataSource.remove
    package: azure-maps-control
    summary: |-
      Removes one or more shapes from the data source.
      If a string is passed in, it is assumed to be an id.
      If a number is passed in, removes the shape at that index.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function remove(shape: string | number | Feature<Geometry, any> | Shape
        | (string | number | Feature<Geometry, any> | Shape)[])
      parameters:
        - id: shape
          type: >-
            string | number | <xref uid="azure-maps-control.export" />=.<xref
            uid="data.Feature" />&lt;<xref uid="azure-maps-control.export"
            />=.<xref uid="data.Geometry" />, any&gt; | <xref
            uid="azure-maps-control.export" />=.Shape | (string | number | <xref
            uid="azure-maps-control.export" />=.<xref uid="data.Feature"
            />&lt;<xref uid="azure-maps-control.export" />=.<xref
            uid="data.Geometry" />, any&gt; | <xref
            uid="azure-maps-control.export" />=.Shape)[]
          description: The shape(s), shape id(s), or feature(s) to be removed
  - name: removeById(string | number | (string | number)[])
    uid: azure-maps-control.export=.source.DataSource.removeById
    package: azure-maps-control
    summary: Removes one or more shapes from the datasource based on its id.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeById(id: string | number | (string | number)[])'
      parameters:
        - id: id
          type: string | number | (string | number)[]
          description: ''
  - name: setOptions(DataSourceOptions)
    uid: azure-maps-control.export=.source.DataSource.setOptions
    package: azure-maps-control
    summary: >-
      Sets the data source options.

      The data source will retain its current values for any option not
      specified in the supplied options.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setOptions(options: DataSourceOptions)'
      parameters:
        - id: options
          type: <xref uid="azure-maps-control.export" />=.DataSourceOptions
          description: the DataSourceOptions to be set
  - name: >-
      setShapes(FeatureCollection | (Geometry | Feature<Geometry, any> |
      Shape)[])
    uid: azure-maps-control.export=.source.DataSource.setShapes
    package: azure-maps-control
    summary: Overwrites all shapes in the data source with the new array of shapes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setShapes(shape: FeatureCollection | (Geometry |
        Feature<Geometry, any> | Shape)[])
      parameters:
        - id: shape
          type: >-
            <xref uid="azure-maps-control.export" />=.<xref
            uid="data.FeatureCollection" /> | (<xref
            uid="azure-maps-control.export" />=.<xref uid="data.Geometry" /> |
            <xref uid="azure-maps-control.export" />=.<xref uid="data.Feature"
            />&lt;<xref uid="azure-maps-control.export" />=.<xref
            uid="data.Geometry" />, any&gt; | <xref
            uid="azure-maps-control.export" />=.Shape)[]
          description: the new shapes to update
  - name: toJson()
    uid: azure-maps-control.export=.source.DataSource.toJson
    package: azure-maps-control
    summary: >-
      Returns a GeoJSON FeatureCollection which contains all the shape data that
      is in the data source.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function toJson(): FeatureCollection'
      return:
        description: ''
        type: >-
          <xref uid="azure-maps-control.export" />=.<xref
          uid="data.FeatureCollection" />
extends: >-
  <xref uid="azure-maps-control.export" />=.<xref uid="source.Source"
  />&lt;<xref uid="azure-maps-control.export" />=.<xref
  uid="source.DataSourceEvents" />&gt;
