### YamlMime:TSType
name: DataSource
uid: azure-maps-control.atlas.source.DataSource
package: azure-maps-control
summary: >-
  A data source class that makes it easy to manage shapes data that will be
  displayed on the map.

  A data source must be added to a layer before it is visible on the map.

  The DataSource class may be used with the SymbolLayer, LineLayer,
  PolygonLayer, BubbleLayer, and HeatMapLayer.
fullName: DataSource
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'DataSource(string, DataSourceOptions)'
    uid: azure-maps-control.atlas.source.DataSource.constructor
    package: azure-maps-control
    summary: >-
      A data source class that makes it easy to manage shapes data that will be
      displayed on the map.

      A data source must be added to a layer before it is visible on the map.

      The `DataSource` class may be used with the `SymbolLayer`, `LineLayer`,
      `PolygonLayer`, `BubbleLayer`, and `HeatMapLayer`.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new DataSource(id?: string, options?: DataSourceOptions)'
      parameters:
        - id: id
          type: string
          description: >-
            a unique id that the user assigns to the data source. If this is not
            specified, then the data source will automatically be assigned an
            id.
        - id: options
          type: <xref uid="azure-maps-control.atlas.DataSourceOptions" />
          description: |
            the options for the data source.
methods:
  - name: >-
      add(FeatureCollection | Feature<atlas.data.Geometry, any> |
      atlas.data.Geometry | GeometryCollection | Shape |
      Array<Feature<atlas.data.Geometry, any> | atlas.data.Geometry | Shape>,
      number)
    uid: azure-maps-control.atlas.source.DataSource.add
    package: azure-maps-control
    summary: >-
      Adds shapes to the data source.

      GeoJSON objects will be wrapped within a Shape class to make them easier
      to manage.

      Optionally specify an index to insert the feature between other
      shapes/features in the layers.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function add(data: FeatureCollection | Feature<atlas.data.Geometry, any>
        | atlas.data.Geometry | GeometryCollection | Shape |
        Array<Feature<atlas.data.Geometry, any> | atlas.data.Geometry | Shape>,
        index?: number)
      parameters:
        - id: data
          type: >-
            <xref uid="azure-maps-control.atlas.data.FeatureCollection" /> |
            <xref uid="azure-maps-control.atlas.data.Feature" />&lt;<xref
            uid="azure-maps-control.atlas.data.Geometry" />, any&gt; | <xref
            uid="azure-maps-control.atlas.data.Geometry" /> | <xref
            uid="azure-maps-control.atlas.data.GeometryCollection" /> | <xref
            uid="azure-maps-control.atlas.Shape" /> | Array&lt;<xref
            uid="azure-maps-control.atlas.data.Feature" />&lt;<xref
            uid="azure-maps-control.atlas.data.Geometry" />, any&gt; | <xref
            uid="azure-maps-control.atlas.data.Geometry" /> | <xref
            uid="azure-maps-control.atlas.Shape" />&gt;
          description: ''
        - id: index
          type: number
          description: |+

  - name: clear()
    uid: azure-maps-control.atlas.source.DataSource.clear
    package: azure-maps-control
    summary: Removes all data in the data source.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function clear()
  - name: dispose()
    uid: azure-maps-control.atlas.source.DataSource.dispose
    package: azure-maps-control
    summary: Cleans up any resources this object is consuming.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function dispose()
  - name: getClusterChildren(number)
    uid: azure-maps-control.atlas.source.DataSource.getClusterChildren
    package: azure-maps-control
    summary: >-
      Retrieves the children of the given cluster on the next zoom level. This
      may be a combination of shapes and sub-clusters.

      The sub-clusters will be features with properties matching
      ClusteredProperties.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getClusterChildren(clusterId: number)'
      parameters:
        - id: clusterId
          type: number
          description: |+

      return:
        type: >-
          Promise&lt;Array&lt;<xref uid="azure-maps-control.atlas.data.Feature"
          />&lt;<xref uid="azure-maps-control.atlas.data.Geometry" />, <xref
          uid="azure-maps-control.atlas.ClusteredProperties" /> | any&gt; |
          <xref uid="azure-maps-control.atlas.Shape" />&gt;&gt;
        description: ''
  - name: getClusterExpansionZoom(number)
    uid: azure-maps-control.atlas.source.DataSource.getClusterExpansionZoom
    package: azure-maps-control
    summary: >-
      Calculates a zoom level at which the cluster will start expanding or break
      apart.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getClusterExpansionZoom(clusterId: number)'
      parameters:
        - id: clusterId
          type: number
          description: |+

      return:
        type: Promise&lt;number&gt;
        description: ''
  - name: 'getClusterLeaves(number, number, number)'
    uid: azure-maps-control.atlas.source.DataSource.getClusterLeaves
    package: azure-maps-control
    summary: Retrieves shapes that are within the cluster.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getClusterLeaves(clusterId: number, limit: number, offset:
        number)
      parameters:
        - id: clusterId
          type: number
          description: ''
        - id: limit
          type: number
          description: >-
            The maximum number of features to return. Set to Infinity to return
            all shapes.
        - id: offset
          type: number
          description: >
            The number of shapes to skip. Allows you to page through the shapes
            in the cluster.
      return:
        type: >-
          Promise&lt;Array&lt;<xref uid="azure-maps-control.atlas.data.Feature"
          />&lt;<xref uid="azure-maps-control.atlas.data.Geometry" />, any&gt; |
          <xref uid="azure-maps-control.atlas.Shape" />&gt;&gt;
        description: ''
  - name: getId()
    uid: azure-maps-control.atlas.source.DataSource.getId
    package: azure-maps-control
    summary: Gets the id of the data source
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getId()
      return:
        type: string
        description: ''
  - name: getOptions()
    uid: azure-maps-control.atlas.source.DataSource.getOptions
    package: azure-maps-control
    summary: Gets the options used by the data source.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getOptions()
      return:
        type: <xref uid="azure-maps-control.atlas.DataSourceOptions" />
        description: ''
  - name: getShapeById(string | number)
    uid: azure-maps-control.atlas.source.DataSource.getShapeById
    package: azure-maps-control
    summary: >-
      Retrieves a shape with the specified id.

      If no shape with the specified id is contained in the data source, null
      will be return.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getShapeById(id: string | number)'
      parameters:
        - id: id
          type: string | number
          description: |
            The id of the shape to return.
      return:
        type: <xref uid="azure-maps-control.atlas.Shape" />
        description: ''
  - name: getShapes()
    uid: azure-maps-control.atlas.source.DataSource.getShapes
    package: azure-maps-control
    summary: Returns all shapes that are in the DataSource.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getShapes()
      return:
        type: '<xref uid="azure-maps-control.atlas.Shape" />[]'
        description: ''
  - name: importDataFromUrl(string)
    uid: azure-maps-control.atlas.source.DataSource.importDataFromUrl
    package: azure-maps-control
    summary: |-
      Downloads a GeoJSON document and imports its data into the data source.
      The GeoJSON document must be on the same domain or accessible using CORS.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function importDataFromUrl(url: string)'
      parameters:
        - id: url
          type: string
          description: |+

      return:
        type: Promise&lt;void&gt;
        description: ''
  - name: >-
      remove(number | string | Shape | Feature<atlas.data.Geometry, any> |
      Array<number | string | Shape | Feature<atlas.data.Geometry, any>>)
    uid: azure-maps-control.atlas.source.DataSource.remove
    package: azure-maps-control
    summary: |-
      Removes one or more shapes from the data source.
      If a string is passed in, it is assumed to be an id.
      If a number is passed in, removes the shape at that index.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function remove(shape: number | string | Shape |
        Feature<atlas.data.Geometry, any> | Array<number | string | Shape |
        Feature<atlas.data.Geometry, any>>)
      parameters:
        - id: shape
          type: >-
            number | string | <xref uid="azure-maps-control.atlas.Shape" /> |
            <xref uid="azure-maps-control.atlas.data.Feature" />&lt;<xref
            uid="azure-maps-control.atlas.data.Geometry" />, any&gt; |
            Array&lt;number | string | <xref
            uid="azure-maps-control.atlas.Shape" /> | <xref
            uid="azure-maps-control.atlas.data.Feature" />&lt;<xref
            uid="azure-maps-control.atlas.data.Geometry" />, any&gt;&gt;
          description: |
            The shape(s), shape id(s), or feature(s) to be removed
  - name: removeById(number | string | Array<number | string>)
    uid: azure-maps-control.atlas.source.DataSource.removeById
    package: azure-maps-control
    summary: Removes one or more shapes from the datasource based on its id.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeById(id: number | string | Array<number | string>)'
      parameters:
        - id: id
          type: number | string | Array&lt;number | string&gt;
          description: ''
  - name: setOptions(DataSourceOptions)
    uid: azure-maps-control.atlas.source.DataSource.setOptions
    package: azure-maps-control
    summary: >-
      Sets the data source options.

      The data source will retain its current values for any option not
      specified in the supplied options.
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setOptions(options: DataSourceOptions)'
      parameters:
        - id: options
          type: <xref uid="azure-maps-control.atlas.DataSourceOptions" />
          description: |
            the DataSourceOptions to be set
  - name: >-
      setShapes(FeatureCollection | Array<Feature<atlas.data.Geometry, any> |
      atlas.data.Geometry | Shape>)
    uid: azure-maps-control.atlas.source.DataSource.setShapes
    package: azure-maps-control
    summary: Overwrites all shapes in the data source with the new array of shapes.
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setShapes(shape: FeatureCollection |
        Array<Feature<atlas.data.Geometry, any> | atlas.data.Geometry | Shape>)
      parameters:
        - id: shape
          type: >-
            <xref uid="azure-maps-control.atlas.data.FeatureCollection" /> |
            Array&lt;<xref uid="azure-maps-control.atlas.data.Feature"
            />&lt;<xref uid="azure-maps-control.atlas.data.Geometry" />, any&gt;
            | <xref uid="azure-maps-control.atlas.data.Geometry" /> | <xref
            uid="azure-maps-control.atlas.Shape" />&gt;
          description: |
            the new shapes to update
  - name: toJson()
    uid: azure-maps-control.atlas.source.DataSource.toJson
    package: azure-maps-control
    summary: >-
      Returns a GeoJSON FeatureCollection which contains all the shape data that
      is in the data source.
    isPreview: false
    isDeprecated: false
    syntax:
      content: function toJson()
      return:
        type: <xref uid="azure-maps-control.atlas.data.FeatureCollection" />
        description: ''
extends: >-
  <xref uid="azure-maps-control.atlas.source.Source" />&lt;<xref
  uid="azure-maps-control.atlas.source.DataSourceEvents" />&gt;
