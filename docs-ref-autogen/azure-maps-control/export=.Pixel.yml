### YamlMime:TSType
name: Pixel
uid: azure-maps-control.export=.Pixel
package: azure-maps-control
summary: Represent a pixel coordinate or offset. Extends an array of [x, y].
fullName: Pixel
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: Pixel(number, number)
    uid: azure-maps-control.export=.Pixel.constructor
    package: azure-maps-control
    summary: >-
      Constructs a Pixel object and initializes it with the specified x and y
      coordinates.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new Pixel(x: number, y: number)'
      parameters:
        - id: x
          type: number
          description: The horizontal pixel offset.
        - id: 'y'
          type: number
          description: The vertical pixel offset.
inheritedProperties:
  - name: length
    uid: azure-maps-control.export=.Pixel.length
    package: azure-maps-control
    summary: >-
      Gets or sets the length of the array. This is a number one higher than the
      highest index in the array.
    fullName: length
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'length: number'
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Array.length
  - name: '[species]'
    uid: azure-maps-control.export=.Pixel.[species]
    package: azure-maps-control
    summary: ''
    fullName: '[species]'
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static [species]: ArrayConstructor'
      return:
        description: ''
        type: ArrayConstructor
    inheritanceDescription: <b>Inherited From</b> Array.__@species@55
inheritedMethods:
  - name: at(number)
    uid: azure-maps-control.export=.Pixel.at
    package: azure-maps-control
    summary: |-
      Takes an integer value and returns the item at that index,
      allowing for positive and negative integers.
      Negative integers count back from the last item in the array.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function at(index: number): undefined | number'
      parameters:
        - id: index
          type: number
          description: ''
      return:
        description: ''
        type: undefined | number
    inheritanceDescription: <b>Inherited From</b> Array.at
  - name: concat((number | ConcatArray<number>)[])
    uid: azure-maps-control.export=.Pixel.concat_1
    package: azure-maps-control
    summary: |-
      Combines two or more arrays.
      This method returns a new array without modifying any existing arrays.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function concat(items: (number | ConcatArray<number>)[]): number[]'
      parameters:
        - id: items
          type: (number | ConcatArray&lt;number&gt;)[]
          description: Additional arrays and/or items to add to the end of the array.
      return:
        description: ''
        type: number[]
    inheritanceDescription: <b>Inherited From</b> Array.concat
  - name: concat(ConcatArray<number>[])
    uid: azure-maps-control.export=.Pixel.concat
    package: azure-maps-control
    summary: |-
      Combines two or more arrays.
      This method returns a new array without modifying any existing arrays.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function concat(items: ConcatArray<number>[]): number[]'
      parameters:
        - id: items
          type: ConcatArray&lt;number&gt;[]
          description: Additional arrays and/or items to add to the end of the array.
      return:
        description: ''
        type: number[]
    inheritanceDescription: <b>Inherited From</b> Array.concat
  - name: copyWithin(number, number, number)
    uid: azure-maps-control.export=.Pixel.copyWithin
    package: azure-maps-control
    summary: >-
      Returns the this object after copying a section of the array identified by
      start and end

      to the same array starting at position target
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function copyWithin(target: number, start: number, end?: number): Pixel'
      parameters:
        - id: target
          type: number
          description: >-
            If target is negative, it is treated as length+target where length
            is the

            length of the array.
        - id: start
          type: number
          description: >-
            If start is negative, it is treated as length+start. If end is
            negative, it

            is treated as length+end.
        - id: end
          type: number
          description: >-
            If not specified, length of the this object is used as its default
            value.
      return:
        description: ''
        type: <xref uid="azure-maps-control.export" />=.Pixel
    inheritanceDescription: <b>Inherited From</b> Array.copyWithin
  - name: entries()
    uid: azure-maps-control.export=.Pixel.entries
    package: azure-maps-control
    summary: Returns an iterable of key, value pairs for every entry in the array
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function entries(): IterableIterator<[number, number]>'
      return:
        description: ''
        type: IterableIterator&lt;[number, number]&gt;
    inheritanceDescription: <b>Inherited From</b> Array.entries
  - name: 'every((value: number, index: number, array: number[]) => unknown, any)'
    uid: azure-maps-control.export=.Pixel.every_1
    package: azure-maps-control
    summary: Determines whether all the members of an array satisfy the specified test.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function every(predicate: (value: number, index: number, array:
        number[]) => unknown, thisArg?: any): boolean
      parameters:
        - id: predicate
          type: '(value: number, index: number, array: number[]) =&gt; unknown'
          description: >-
            A function that accepts up to three arguments. The every method
            calls

            the predicate function for each element in the array until the
            predicate returns a value

            which is coercible to the Boolean value false, or until the end of
            the array.
        - id: thisArg
          type: any
          description: >-
            An object to which the this keyword can refer in the predicate
            function.

            If thisArg is omitted, undefined is used as the this value.
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Array.every
  - name: 'every<S>((value: number, index: number, array: number[]) => value, any)'
    uid: azure-maps-control.export=.Pixel.every
    package: azure-maps-control
    summary: Determines whether all the members of an array satisfy the specified test.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function every<S>(predicate: (value: number, index: number, array:
        number[]) => value, thisArg?: any): this
      parameters:
        - id: predicate
          type: '(value: number, index: number, array: number[]) =&gt; value'
          description: >-
            A function that accepts up to three arguments. The every method
            calls

            the predicate function for each element in the array until the
            predicate returns a value

            which is coercible to the Boolean value false, or until the end of
            the array.
        - id: thisArg
          type: any
          description: >-
            An object to which the this keyword can refer in the predicate
            function.

            If thisArg is omitted, undefined is used as the this value.
      return:
        description: ''
        type: this
    inheritanceDescription: <b>Inherited From</b> Array.every
  - name: fill(number, number, number)
    uid: azure-maps-control.export=.Pixel.fill
    package: azure-maps-control
    summary: >-
      Changes all array elements from `start` to `end` index to a static `value`
      and returns the modified array
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function fill(value: number, start?: number, end?: number): Pixel'
      parameters:
        - id: value
          type: number
          description: value to fill array section with
        - id: start
          type: number
          description: >-
            index to start filling the array at. If start is negative, it is
            treated as

            length+start where length is the length of the array.
        - id: end
          type: number
          description: >-
            index to stop filling the array at. If end is negative, it is
            treated as

            length+end.
      return:
        description: ''
        type: <xref uid="azure-maps-control.export" />=.Pixel
    inheritanceDescription: <b>Inherited From</b> Array.fill
  - name: 'filter((value: number, index: number, array: number[]) => unknown, any)'
    uid: azure-maps-control.export=.Pixel.filter_1
    package: azure-maps-control
    summary: >-
      Returns the elements of an array that meet the condition specified in a
      callback function.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function filter(predicate: (value: number, index: number, array:
        number[]) => unknown, thisArg?: any): number[]
      parameters:
        - id: predicate
          type: '(value: number, index: number, array: number[]) =&gt; unknown'
          description: >-
            A function that accepts up to three arguments. The filter method
            calls the predicate function one time for each element in the array.
        - id: thisArg
          type: any
          description: >-
            An object to which the this keyword can refer in the predicate
            function. If thisArg is omitted, undefined is used as the this
            value.
      return:
        description: ''
        type: number[]
    inheritanceDescription: <b>Inherited From</b> Array.filter
  - name: 'filter<S>((value: number, index: number, array: number[]) => value, any)'
    uid: azure-maps-control.export=.Pixel.filter
    package: azure-maps-control
    summary: >-
      Returns the elements of an array that meet the condition specified in a
      callback function.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function filter<S>(predicate: (value: number, index: number, array:
        number[]) => value, thisArg?: any): S[]
      parameters:
        - id: predicate
          type: '(value: number, index: number, array: number[]) =&gt; value'
          description: >-
            A function that accepts up to three arguments. The filter method
            calls the predicate function one time for each element in the array.
        - id: thisArg
          type: any
          description: >-
            An object to which the this keyword can refer in the predicate
            function. If thisArg is omitted, undefined is used as the this
            value.
      return:
        description: ''
        type: S[]
    inheritanceDescription: <b>Inherited From</b> Array.filter
  - name: 'find((value: number, index: number, obj: number[]) => unknown, any)'
    uid: azure-maps-control.export=.Pixel.find_1
    package: azure-maps-control
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function find(predicate: (value: number, index: number, obj: number[])
        => unknown, thisArg?: any): undefined | number
      parameters:
        - id: predicate
          type: '(value: number, index: number, obj: number[]) =&gt; unknown'
          description: ''
        - id: thisArg
          type: any
          description: ''
      return:
        description: ''
        type: undefined | number
    inheritanceDescription: <b>Inherited From</b> Array.find
  - name: >-
      find<S>((this: void, value: number, index: number, obj: number[]) =>
      value, any)
    uid: azure-maps-control.export=.Pixel.find
    package: azure-maps-control
    summary: >-
      Returns the value of the first element in the array where predicate is
      true, and undefined

      otherwise.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function find<S>(predicate: (this: void, value: number, index: number,
        obj: number[]) => value, thisArg?: any): undefined | S
      parameters:
        - id: predicate
          type: >-
            (this: void, value: number, index: number, obj: number[]) =&gt;
            value
          description: >-
            find calls predicate once for each element of the array, in
            ascending

            order, until it finds one where predicate returns true. If such an
            element is found, find

            immediately returns that element value. Otherwise, find returns
            undefined.
        - id: thisArg
          type: any
          description: >-
            If provided, it will be used as the this value for each invocation
            of

            predicate. If it is not provided, undefined is used instead.
      return:
        description: ''
        type: undefined | S
    inheritanceDescription: <b>Inherited From</b> Array.find
  - name: 'findIndex((value: number, index: number, obj: number[]) => unknown, any)'
    uid: azure-maps-control.export=.Pixel.findIndex
    package: azure-maps-control
    summary: >-
      Returns the index of the first element in the array where predicate is
      true, and -1

      otherwise.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function findIndex(predicate: (value: number, index: number, obj:
        number[]) => unknown, thisArg?: any): number
      parameters:
        - id: predicate
          type: '(value: number, index: number, obj: number[]) =&gt; unknown'
          description: >-
            find calls predicate once for each element of the array, in
            ascending

            order, until it finds one where predicate returns true. If such an
            element is found,

            findIndex immediately returns that element index. Otherwise,
            findIndex returns -1.
        - id: thisArg
          type: any
          description: >-
            If provided, it will be used as the this value for each invocation
            of

            predicate. If it is not provided, undefined is used instead.
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Array.findIndex
  - name: flat<A, D>(A, D)
    uid: azure-maps-control.export=.Pixel.flat
    package: azure-maps-control
    summary: >-
      Returns a new array with all sub-array elements concatenated into it
      recursively up to the

      specified depth.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function flat<A, D>(this: A, depth?: D): FlatArray<A, D>[]'
      parameters:
        - id: this
          type: A
          description: ''
        - id: depth
          type: D
          description: The maximum recursion depth
      return:
        description: ''
        type: FlatArray&lt;A, D&gt;[]
    inheritanceDescription: <b>Inherited From</b> Array.flat
  - name: >-
      flatMap<U, This>((this: This, value: number, index: number, array:
      number[]) => U | (readonly U[]), This)
    uid: azure-maps-control.export=.Pixel.flatMap
    package: azure-maps-control
    summary: >-
      Calls a defined callback function on each element of an array. Then,
      flattens the result into

      a new array.

      This is identical to a map followed by flat with depth 1.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function flatMap<U, This>(callback: (this: This, value: number, index:
        number, array: number[]) => U | (readonly U[]), thisArg?: This): U[]
      parameters:
        - id: callback
          type: >-
            (this: This, value: number, index: number, array: number[]) =&gt; U
            | (readonly U[])
          description: >-
            A function that accepts up to three arguments. The flatMap method
            calls the

            callback function one time for each element in the array.
        - id: thisArg
          type: This
          description: >-
            An object to which the this keyword can refer in the callback
            function. If

            thisArg is omitted, undefined is used as the this value.
      return:
        description: ''
        type: U[]
    inheritanceDescription: <b>Inherited From</b> Array.flatMap
  - name: 'forEach((value: number, index: number, array: number[]) => void, any)'
    uid: azure-maps-control.export=.Pixel.forEach
    package: azure-maps-control
    summary: Performs the specified action for each element in an array.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function forEach(callbackfn: (value: number, index: number, array:
        number[]) => void, thisArg?: any)
      parameters:
        - id: callbackfn
          type: '(value: number, index: number, array: number[]) =&gt; void'
          description: >-
            A function that accepts up to three arguments. forEach calls the
            callbackfn function one time for each element in the array.
        - id: thisArg
          type: any
          description: >-
            An object to which the this keyword can refer in the callbackfn
            function. If thisArg is omitted, undefined is used as the this
            value.
    inheritanceDescription: <b>Inherited From</b> Array.forEach
  - name: 'from<T, U>(ArrayLike<T>, (v: T, k: number) => U, any)'
    uid: azure-maps-control.export=.Pixel.from_1
    package: azure-maps-control
    summary: Creates an array from an iterable object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k:
        number) => U, thisArg?: any): U[]
      parameters:
        - id: arrayLike
          type: ArrayLike&lt;T&gt;
          description: An array-like object to convert to an array.
        - id: mapfn
          type: '(v: T, k: number) =&gt; U'
          description: A mapping function to call on every element of the array.
        - id: thisArg
          type: any
          description: Value of 'this' used to invoke the mapfn.
      return:
        description: ''
        type: U[]
    inheritanceDescription: <b>Inherited From</b> Array.from
  - name: 'from<T, U>(Iterable<T> | ArrayLike<T>, (v: T, k: number) => U, any)'
    uid: azure-maps-control.export=.Pixel.from_3
    package: azure-maps-control
    summary: Creates an array from an iterable object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function from<T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn:
        (v: T, k: number) => U, thisArg?: any): U[]
      parameters:
        - id: iterable
          type: Iterable&lt;T&gt; | ArrayLike&lt;T&gt;
          description: An iterable object to convert to an array.
        - id: mapfn
          type: '(v: T, k: number) =&gt; U'
          description: A mapping function to call on every element of the array.
        - id: thisArg
          type: any
          description: Value of 'this' used to invoke the mapfn.
      return:
        description: ''
        type: U[]
    inheritanceDescription: <b>Inherited From</b> Array.from
  - name: from<T>(ArrayLike<T>)
    uid: azure-maps-control.export=.Pixel.from
    package: azure-maps-control
    summary: Creates an array from an array-like object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function from<T>(arrayLike: ArrayLike<T>): T[]'
      parameters:
        - id: arrayLike
          type: ArrayLike&lt;T&gt;
          description: An array-like object to convert to an array.
      return:
        description: ''
        type: T[]
    inheritanceDescription: <b>Inherited From</b> Array.from
  - name: from<T>(Iterable<T> | ArrayLike<T>)
    uid: azure-maps-control.export=.Pixel.from_2
    package: azure-maps-control
    summary: Creates an array from an iterable object.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function from<T>(iterable: Iterable<T> | ArrayLike<T>): T[]'
      parameters:
        - id: iterable
          type: Iterable&lt;T&gt; | ArrayLike&lt;T&gt;
          description: An iterable object to convert to an array.
      return:
        description: ''
        type: T[]
    inheritanceDescription: <b>Inherited From</b> Array.from
  - name: includes(number, number)
    uid: azure-maps-control.export=.Pixel.includes
    package: azure-maps-control
    summary: >-
      Determines whether an array includes a certain element, returning true or
      false as appropriate.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function includes(searchElement: number, fromIndex?: number): boolean'
      parameters:
        - id: searchElement
          type: number
          description: The element to search for.
        - id: fromIndex
          type: number
          description: >-
            The position in this array at which to begin searching for
            searchElement.
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Array.includes
  - name: indexOf(number, number)
    uid: azure-maps-control.export=.Pixel.indexOf
    package: azure-maps-control
    summary: >-
      Returns the index of the first occurrence of a value in an array, or -1 if
      it is not present.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function indexOf(searchElement: number, fromIndex?: number): number'
      parameters:
        - id: searchElement
          type: number
          description: The value to locate in the array.
        - id: fromIndex
          type: number
          description: >-
            The array index at which to begin the search. If fromIndex is
            omitted, the search starts at index 0.
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Array.indexOf
  - name: isArray(any)
    uid: azure-maps-control.export=.Pixel.isArray
    package: azure-maps-control
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function isArray(arg: any): arg'
      parameters:
        - id: arg
          type: any
          description: ''
      return:
        description: ''
        type: arg
    inheritanceDescription: <b>Inherited From</b> Array.isArray
  - name: join(string)
    uid: azure-maps-control.export=.Pixel.join
    package: azure-maps-control
    summary: >-
      Adds all the elements of an array into a string, separated by the
      specified separator string.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function join(separator?: string): string'
      parameters:
        - id: separator
          type: string
          description: >-
            A string used to separate one element of the array from the next in
            the resulting string. If omitted, the array elements are separated
            with a comma.
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Array.join
  - name: keys()
    uid: azure-maps-control.export=.Pixel.keys
    package: azure-maps-control
    summary: Returns an iterable of keys in the array
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function keys(): IterableIterator<number>'
      return:
        description: ''
        type: IterableIterator&lt;number&gt;
    inheritanceDescription: <b>Inherited From</b> Array.keys
  - name: lastIndexOf(number, number)
    uid: azure-maps-control.export=.Pixel.lastIndexOf
    package: azure-maps-control
    summary: >-
      Returns the index of the last occurrence of a specified value in an array,
      or -1 if it is not present.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function lastIndexOf(searchElement: number, fromIndex?: number): number'
      parameters:
        - id: searchElement
          type: number
          description: The value to locate in the array.
        - id: fromIndex
          type: number
          description: >-
            The array index at which to begin searching backward. If fromIndex
            is omitted, the search starts at the last index in the array.
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Array.lastIndexOf
  - name: 'map<U>((value: number, index: number, array: number[]) => U, any)'
    uid: azure-maps-control.export=.Pixel.map
    package: azure-maps-control
    summary: >-
      Calls a defined callback function on each element of an array, and returns
      an array that contains the results.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function map<U>(callbackfn: (value: number, index: number, array:
        number[]) => U, thisArg?: any): U[]
      parameters:
        - id: callbackfn
          type: '(value: number, index: number, array: number[]) =&gt; U'
          description: >-
            A function that accepts up to three arguments. The map method calls
            the callbackfn function one time for each element in the array.
        - id: thisArg
          type: any
          description: >-
            An object to which the this keyword can refer in the callbackfn
            function. If thisArg is omitted, undefined is used as the this
            value.
      return:
        description: ''
        type: U[]
    inheritanceDescription: <b>Inherited From</b> Array.map
  - name: of<T>(T[])
    uid: azure-maps-control.export=.Pixel.of
    package: azure-maps-control
    summary: Returns a new array from a set of elements.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function of<T>(items: T[]): T[]'
      parameters:
        - id: items
          type: T[]
          description: A set of elements to include in the new array object.
      return:
        description: ''
        type: T[]
    inheritanceDescription: <b>Inherited From</b> Array.of
  - name: pop()
    uid: azure-maps-control.export=.Pixel.pop
    package: azure-maps-control
    summary: >-
      Removes the last element from an array and returns it.

      If the array is empty, undefined is returned and the array is not
      modified.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function pop(): undefined | number'
      return:
        description: ''
        type: undefined | number
    inheritanceDescription: <b>Inherited From</b> Array.pop
  - name: push(number[])
    uid: azure-maps-control.export=.Pixel.push
    package: azure-maps-control
    summary: >-
      Appends new elements to the end of an array, and returns the new length of
      the array.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function push(items: number[]): number'
      parameters:
        - id: items
          type: number[]
          description: New elements to add to the array.
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Array.push
  - name: >-
      reduce((previousValue: number, currentValue: number, currentIndex: number,
      array: number[]) => number)
    uid: azure-maps-control.export=.Pixel.reduce
    package: azure-maps-control
    summary: >-
      Calls the specified callback function for all the elements in an array.
      The return value of the callback function is the accumulated result, and
      is provided as an argument in the next call to the callback function.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reduce(callbackfn: (previousValue: number, currentValue:
        number, currentIndex: number, array: number[]) => number): number
      parameters:
        - id: callbackfn
          type: >-
            (previousValue: number, currentValue: number, currentIndex: number,
            array: number[]) =&gt; number
          description: >-
            A function that accepts up to four arguments. The reduce method
            calls the callbackfn function one time for each element in the
            array.
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Array.reduce
  - name: >-
      reduce((previousValue: number, currentValue: number, currentIndex: number,
      array: number[]) => number, number)
    uid: azure-maps-control.export=.Pixel.reduce_1
    package: azure-maps-control
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reduce(callbackfn: (previousValue: number, currentValue:
        number, currentIndex: number, array: number[]) => number, initialValue:
        number): number
      parameters:
        - id: callbackfn
          type: >-
            (previousValue: number, currentValue: number, currentIndex: number,
            array: number[]) =&gt; number
          description: ''
        - id: initialValue
          type: number
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Array.reduce
  - name: >-
      reduce<U>((previousValue: U, currentValue: number, currentIndex: number,
      array: number[]) => U, U)
    uid: azure-maps-control.export=.Pixel.reduce_2
    package: azure-maps-control
    summary: >-
      Calls the specified callback function for all the elements in an array.
      The return value of the callback function is the accumulated result, and
      is provided as an argument in the next call to the callback function.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reduce<U>(callbackfn: (previousValue: U, currentValue: number,
        currentIndex: number, array: number[]) => U, initialValue: U): U
      parameters:
        - id: callbackfn
          type: >-
            (previousValue: U, currentValue: number, currentIndex: number,
            array: number[]) =&gt; U
          description: >-
            A function that accepts up to four arguments. The reduce method
            calls the callbackfn function one time for each element in the
            array.
        - id: initialValue
          type: U
          description: >-
            If initialValue is specified, it is used as the initial value to
            start the accumulation. The first call to the callbackfn function
            provides this value as an argument instead of an array value.
      return:
        description: ''
        type: U
    inheritanceDescription: <b>Inherited From</b> Array.reduce
  - name: >-
      reduceRight((previousValue: number, currentValue: number, currentIndex:
      number, array: number[]) => number)
    uid: azure-maps-control.export=.Pixel.reduceRight
    package: azure-maps-control
    summary: >-
      Calls the specified callback function for all the elements in an array, in
      descending order. The return value of the callback function is the
      accumulated result, and is provided as an argument in the next call to the
      callback function.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reduceRight(callbackfn: (previousValue: number, currentValue:
        number, currentIndex: number, array: number[]) => number): number
      parameters:
        - id: callbackfn
          type: >-
            (previousValue: number, currentValue: number, currentIndex: number,
            array: number[]) =&gt; number
          description: >-
            A function that accepts up to four arguments. The reduceRight method
            calls the callbackfn function one time for each element in the
            array.
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Array.reduceRight
  - name: >-
      reduceRight((previousValue: number, currentValue: number, currentIndex:
      number, array: number[]) => number, number)
    uid: azure-maps-control.export=.Pixel.reduceRight_1
    package: azure-maps-control
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reduceRight(callbackfn: (previousValue: number, currentValue:
        number, currentIndex: number, array: number[]) => number, initialValue:
        number): number
      parameters:
        - id: callbackfn
          type: >-
            (previousValue: number, currentValue: number, currentIndex: number,
            array: number[]) =&gt; number
          description: ''
        - id: initialValue
          type: number
          description: ''
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Array.reduceRight
  - name: >-
      reduceRight<U>((previousValue: U, currentValue: number, currentIndex:
      number, array: number[]) => U, U)
    uid: azure-maps-control.export=.Pixel.reduceRight_2
    package: azure-maps-control
    summary: >-
      Calls the specified callback function for all the elements in an array, in
      descending order. The return value of the callback function is the
      accumulated result, and is provided as an argument in the next call to the
      callback function.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reduceRight<U>(callbackfn: (previousValue: U, currentValue:
        number, currentIndex: number, array: number[]) => U, initialValue: U): U
      parameters:
        - id: callbackfn
          type: >-
            (previousValue: U, currentValue: number, currentIndex: number,
            array: number[]) =&gt; U
          description: >-
            A function that accepts up to four arguments. The reduceRight method
            calls the callbackfn function one time for each element in the
            array.
        - id: initialValue
          type: U
          description: >-
            If initialValue is specified, it is used as the initial value to
            start the accumulation. The first call to the callbackfn function
            provides this value as an argument instead of an array value.
      return:
        description: ''
        type: U
    inheritanceDescription: <b>Inherited From</b> Array.reduceRight
  - name: reverse()
    uid: azure-maps-control.export=.Pixel.reverse
    package: azure-maps-control
    summary: |-
      Reverses the elements in an array in place.
      This method mutates the array and returns a reference to the same array.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function reverse(): number[]'
      return:
        description: ''
        type: number[]
    inheritanceDescription: <b>Inherited From</b> Array.reverse
  - name: shift()
    uid: azure-maps-control.export=.Pixel.shift
    package: azure-maps-control
    summary: >-
      Removes the first element from an array and returns it.

      If the array is empty, undefined is returned and the array is not
      modified.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function shift(): undefined | number'
      return:
        description: ''
        type: undefined | number
    inheritanceDescription: <b>Inherited From</b> Array.shift
  - name: slice(number, number)
    uid: azure-maps-control.export=.Pixel.slice
    package: azure-maps-control
    summary: >-
      Returns a copy of a section of an array.

      For both start and end, a negative index can be used to indicate an offset
      from the end of the array.

      For example, -2 refers to the second to last element of the array.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function slice(start?: number, end?: number): number[]'
      parameters:
        - id: start
          type: number
          description: |-
            The beginning index of the specified portion of the array.
            If start is undefined, then the slice begins at index 0.
        - id: end
          type: number
          description: >-
            The end index of the specified portion of the array. This is
            exclusive of the element at the index 'end'.

            If end is undefined, then the slice extends to the end of the array.
      return:
        description: ''
        type: number[]
    inheritanceDescription: <b>Inherited From</b> Array.slice
  - name: 'some((value: number, index: number, array: number[]) => unknown, any)'
    uid: azure-maps-control.export=.Pixel.some
    package: azure-maps-control
    summary: >-
      Determines whether the specified callback function returns true for any
      element of an array.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function some(predicate: (value: number, index: number, array: number[])
        => unknown, thisArg?: any): boolean
      parameters:
        - id: predicate
          type: '(value: number, index: number, array: number[]) =&gt; unknown'
          description: >-
            A function that accepts up to three arguments. The some method calls

            the predicate function for each element in the array until the
            predicate returns a value

            which is coercible to the Boolean value true, or until the end of
            the array.
        - id: thisArg
          type: any
          description: >-
            An object to which the this keyword can refer in the predicate
            function.

            If thisArg is omitted, undefined is used as the this value.
      return:
        description: ''
        type: boolean
    inheritanceDescription: <b>Inherited From</b> Array.some
  - name: 'sort((a: number, b: number) => number)'
    uid: azure-maps-control.export=.Pixel.sort
    package: azure-maps-control
    summary: |-
      Sorts an array in place.
      This method mutates the array and returns a reference to the same array.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function sort(compareFn?: (a: number, b: number) => number): Pixel'
      parameters:
        - id: compareFn
          type: '(a: number, b: number) =&gt; number'
          description: >-
            Function used to determine the order of the elements. It is expected
            to return

            a negative value if the first argument is less than the second
            argument, zero if they're equal, and a positive

            value otherwise. If omitted, the elements are sorted in ascending,
            ASCII character order.

            ```ts

            [11,2,22,1].sort((a, b) => a - b)

            ```
      return:
        description: ''
        type: <xref uid="azure-maps-control.export" />=.Pixel
    inheritanceDescription: <b>Inherited From</b> Array.sort
  - name: splice(number, number)
    uid: azure-maps-control.export=.Pixel.splice
    package: azure-maps-control
    summary: >-
      Removes elements from an array and, if necessary, inserts new elements in
      their place, returning the deleted elements.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function splice(start: number, deleteCount?: number): number[]'
      parameters:
        - id: start
          type: number
          description: >-
            The zero-based location in the array from which to start removing
            elements.
        - id: deleteCount
          type: number
          description: The number of elements to remove.
      return:
        description: An array containing the elements that were deleted.
        type: number[]
    inheritanceDescription: <b>Inherited From</b> Array.splice
  - name: splice(number, number, number[])
    uid: azure-maps-control.export=.Pixel.splice_1
    package: azure-maps-control
    summary: >-
      Removes elements from an array and, if necessary, inserts new elements in
      their place, returning the deleted elements.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function splice(start: number, deleteCount: number, items: number[]):
        number[]
      parameters:
        - id: start
          type: number
          description: >-
            The zero-based location in the array from which to start removing
            elements.
        - id: deleteCount
          type: number
          description: The number of elements to remove.
        - id: items
          type: number[]
          description: Elements to insert into the array in place of the deleted elements.
      return:
        description: An array containing the elements that were deleted.
        type: number[]
    inheritanceDescription: <b>Inherited From</b> Array.splice
  - name: toLocaleString()
    uid: azure-maps-control.export=.Pixel.toLocaleString
    package: azure-maps-control
    summary: >-
      Returns a string representation of an array. The elements are converted to
      string using their toLocaleString methods.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function toLocaleString(): string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Array.toLocaleString
  - name: toString()
    uid: azure-maps-control.export=.Pixel.toString
    package: azure-maps-control
    summary: Returns a string representation of an array.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function toString(): string'
      return:
        description: ''
        type: string
    inheritanceDescription: <b>Inherited From</b> Array.toString
  - name: unshift(number[])
    uid: azure-maps-control.export=.Pixel.unshift
    package: azure-maps-control
    summary: >-
      Inserts new elements at the start of an array, and returns the new length
      of the array.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function unshift(items: number[]): number'
      parameters:
        - id: items
          type: number[]
          description: Elements to insert at the start of the array.
      return:
        description: ''
        type: number
    inheritanceDescription: <b>Inherited From</b> Array.unshift
  - name: values()
    uid: azure-maps-control.export=.Pixel.values
    package: azure-maps-control
    summary: Returns an iterable of values in the array
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function values(): IterableIterator<number>'
      return:
        description: ''
        type: IterableIterator&lt;number&gt;
    inheritanceDescription: <b>Inherited From</b> Array.values
  - name: '[iterator]()'
    uid: azure-maps-control.export=.Pixel.[iterator]
    package: azure-maps-control
    summary: Iterator
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function [iterator](): IterableIterator<number>'
      return:
        description: ''
        type: IterableIterator&lt;number&gt;
    inheritanceDescription: <b>Inherited From</b> Array.__@iterator@110
  - name: '[unscopables]()'
    uid: azure-maps-control.export=.Pixel.[unscopables]
    package: azure-maps-control
    summary: |-
      Returns an object whose properties have the value 'true'
      when they will be absent when used in a 'with' statement.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function [unscopables](): { copyWithin: boolean, entries: boolean, fill:
        boolean, find: boolean, findIndex: boolean, keys: boolean, values:
        boolean }
      return:
        description: ''
        type: >-
          { copyWithin: boolean, entries: boolean, fill: boolean, find: boolean,
          findIndex: boolean, keys: boolean, values: boolean }
    inheritanceDescription: <b>Inherited From</b> Array.__@unscopables@112
methods:
  - name: fromData(object)
    uid: azure-maps-control.export=.Pixel.fromData
    package: azure-maps-control
    summary: >-
      Generates a Pixel object from an object that contains coordinate
      information.

      The object is scanned for x and y properties using a case insensitive
      test.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function fromData(data: object): Pixel'
      parameters:
        - id: data
          type: object
          description: The object to extract coordinate information from.
      return:
        description: A Pixel object that represents the provided data information.
        type: <xref uid="azure-maps-control.export" />=.Pixel
  - name: getDestination(Pixel, number, number)
    uid: azure-maps-control.export=.Pixel.getDestination
    package: azure-maps-control
    summary: |-
      Calculates a destination pixel given an origin pixel,
      a heading relative to the y-axis (0 = north) with clockwise-rotation,
      and a distance in pixel units.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        static function getDestination(origin: Pixel, heading: number, distance:
        number): Pixel
      parameters:
        - id: origin
          type: <xref uid="azure-maps-control.export" />=.Pixel
          description: The starting pixel.
        - id: heading
          type: number
          description: The heading at which to move away from the origin pixel.
        - id: distance
          type: number
          description: The distance to move from the origin pixel.
      return:
        description: ''
        type: <xref uid="azure-maps-control.export" />=.Pixel
  - name: getDistance(Pixel, Pixel)
    uid: azure-maps-control.export=.Pixel.getDistance
    package: azure-maps-control
    summary: |-
      Calculates the distance between two pixels.
      Returned value is in screen pixel units.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function getDistance(p1: Pixel, p2: Pixel): number'
      parameters:
        - id: p1
          type: <xref uid="azure-maps-control.export" />=.Pixel
          description: The first pixel.
        - id: p2
          type: <xref uid="azure-maps-control.export" />=.Pixel
          description: The second pixel.
      return:
        description: ''
        type: number
  - name: getHeading(Pixel, Pixel)
    uid: azure-maps-control.export=.Pixel.getHeading
    package: azure-maps-control
    summary: >-
      Calculates the heading between two pixels.​ The heading value is relative
      to the y-axis (0 = north) with clockwise-rotation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function getHeading(origin: Pixel, destination: Pixel): number'
      parameters:
        - id: origin
          type: <xref uid="azure-maps-control.export" />=.Pixel
          description: The pixel the heading will point away from.
        - id: destination
          type: <xref uid="azure-maps-control.export" />=.Pixel
          description: The pixel the heading will point toward.
      return:
        description: ''
        type: number
  - name: getX(Pixel)
    uid: azure-maps-control.export=.Pixel.getX
    package: azure-maps-control
    summary: Return the x coordinate of the specified pixel.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function getX(pixel: Pixel): number'
      parameters:
        - id: pixel
          type: <xref uid="azure-maps-control.export" />=.Pixel
          description: The pixel to get the x coordinate of.
      return:
        description: ''
        type: number
  - name: getY(Pixel)
    uid: azure-maps-control.export=.Pixel.getY
    package: azure-maps-control
    summary: Return the y coordinate of the specified pixel.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'static function getY(pixel: Pixel): number'
      parameters:
        - id: pixel
          type: <xref uid="azure-maps-control.export" />=.Pixel
          description: The pixel to get the y coordinate of.
      return:
        description: ''
        type: number
extends: Array&lt;number&gt;
