### YamlMime:TSType
name: SearchGetSearchPOICategoryOptionalParams
uid: azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams
package: azure-maps-rest
summary: Optional Parameters.
fullName: SearchGetSearchPOICategoryOptionalParams
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: abortSignal
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.abortSignal
    package: azure-maps-rest
    summary: The signal which can be used to abort requests.
    fullName: abortSignal
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'abortSignal?: AbortSignalLike'
      return:
        type: AbortSignalLike
        description: ''
  - name: brandSet
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.brandSet
    package: azure-maps-rest
    summary: >
      A comma-separated list of brand names which could be used to restrict the
      result to specific

      brands. Item order does not matter. When multiple brands are provided,
      only results that

      belong to (at least) one of the provided list will be returned. Brands
      that contain a "," in

      their name should be put into quotes.

      Usage examples:


      brandSet=Foo


      brandSet=Foo,Bar


      brandSet="A,B,C Comma",Bar
    fullName: brandSet
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'brandSet?: string[]'
      return:
        type: 'string[]'
        description: ''
  - name: btmRight
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.btmRight
    package: azure-maps-rest
    summary: 'Bottom right position of the bounding box. E.g. 37.553,-122.453'
    fullName: btmRight
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'btmRight?: string'
      return:
        type: string
        description: ''
  - name: connectorSet
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.connectorSet
    package: azure-maps-rest
    summary: >
      A comma-separated list of connector types which could be used to restrict
      the result to

      Electric Vehicle Station supporting specific connector types. Item order
      does not matter. When

      multiple connector types are provided, only results that belong to (at
      least) one of the

      provided list will be returned.

      Available connector types are:

      * `StandardHouseholdCountrySpecific` - These are the standard household
      connectors for a

      certain region. They are all AC single phase and the standard Voltage and
      standard Amperage.

      See also: [Plug & socket types - World

      Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets).

      * `IEC62196Type1` - Type 1 connector as defined in the IEC 62196-2
      standard. Also called

      Yazaki after the original manufacturer or SAE J1772 after the standard
      that first published

      it. Mostly used in combination with 120V single phase or up to 240V single
      phase

      infrastructure.

      * `IEC62196Type1CCS` - Type 1 based combo connector as defined in the IEC
      62196-3 standard.

      The connector is based on the Type 1 connector – as defined in the IEC
      62196-2 standard – with

      two additional direct current (DC) contacts to allow DC fast charging.

      * `IEC62196Type2CableAttached` - Type 2 connector as defined in the IEC
      62196-2 standard.

      Provided as a cable and plug attached to the charging point.

      * `IEC62196Type2Outlet` - Type 2 connector as defined in the IEC 62196-2
      standard. Provided as

      a socket set into the charging point.

      * `IEC62196Type2CCS` - Type 2 based combo connector as defined in the IEC
      62196-3 standard.

      The connector is based on the Type 2 connector – as defined in the IEC
      62196-2 standard – with

      two additional direct current (DC) contacts to allow DC fast charging.

      * `IEC62196Type3` - Type 3 connector as defined in the IEC 62196-2
      standard. Also called Scame

      after the original manufacturer. Mostly used in combination with up to
      240V single phase or up

      to 420V three phase infrastructure.

      * `Chademo` - CHAdeMO connector named after an association formed by the
      Tokyo Electric Power

      Company and industrial partners. Because of this is is also known as the
      TEPCO's connector. It

      supports fast DC charging.

      * `IEC60309AC1PhaseBlue` - Industrial Blue connector is a connector
      defined in the IEC 60309

      standard. It is sometime referred to as by some combination of the
      standard, the color and the

      fact that is a single phase connector. The connector usually has the
      "P+N+E, 6h"

      configuration.

      * `IEC60309DCWhite` - Industrial White connector is a DC connector defined
      in the IEC 60309

      standard.

      * `Tesla` - The Tesla connector is the regionally specific Tesla
      Supercharger connector. I.e.

      it refers to either Tesla's proprietary connector, sometimes referred to
      as Tesla Port mostly

      limited to North America or the modified Type 2 (DC over Type 2) in
      Europe.


      Usage examples:


      connectorSet=IEC62196Type2CableAttached

      connectorSet=IEC62196Type2Outlet,IEC62196Type2CableAttached
    fullName: connectorSet
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'connectorSet?: ConnectorSet[]'
      return:
        type: '<xref uid="azure-maps-rest.atlas.service.Models.ConnectorSet" />[]'
        description: ''
  - name: countrySet
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.countrySet
    package: azure-maps-rest
    summary: >-
      Comma separated string of country codes, e.g. FR,ES. This will limit the
      search to the

      specified countries
    fullName: countrySet
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'countrySet?: string[]'
      return:
        type: 'string[]'
        description: ''
  - name: customHeaders
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.customHeaders
    package: azure-maps-rest
    summary: |-
      {object} [customHeaders] User defined custom request headers that
      will be applied before the request is sent.
    fullName: customHeaders
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'customHeaders?: [key: string]: string'
      return:
        type: '[key: string]\: string'
        description: ''
  - name: extendedPostalCodesFor
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.extendedPostalCodesFor
    package: azure-maps-rest
    summary: >
      Indexes for which extended postal codes should be included in the results.

      Available indexes are:


      **Addr** = Address ranges


      **Geo** = Geographies


      **PAD** = Point Addresses


      **POI** = Points of Interest


      **Str** = Streets


      **XStr** = Cross Streets (intersections)


      Value should be a comma separated list of index types (in any order) or
      **None** for no

      indexes.


      By default extended postal codes are included for all indexes except Geo.
      Extended postal code

      lists for geographies can be quite long so they have to be explicitly
      requested when needed.


      Usage examples:


      extendedPostalCodesFor=POI


      extendedPostalCodesFor=PAD,Addr,POI


      extendedPostalCodesFor=None


      Extended postal code is returned as an **extendedPostalCode** property of
      an address.

      Availability is region-dependent.
    fullName: extendedPostalCodesFor
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'extendedPostalCodesFor?: string'
      return:
        type: string
        description: ''
  - name: language
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.language
    package: azure-maps-rest
    summary: >
      Language in which search results should be returned. Should be one of
      supported IETF language

      tags, case insensitive. When data in specified language is not available
      for a specific field,

      default language is used.

      Please refer to [Supported

      Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages)
      for details.
    fullName: language
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'language?: string'
      return:
        type: string
        description: ''
  - name: lat
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.lat
    package: azure-maps-rest
    summary: Latitude where results should be biased. E.g. 37.337
    fullName: lat
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'lat?: number'
      return:
        type: number
        description: ''
  - name: limit
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.limit
    package: azure-maps-rest
    summary: >-
      Maximum number of responses that will be returned. Default: 10, minimum: 1
      and maximum: 100
    fullName: limit
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'limit?: number'
      return:
        type: number
        description: ''
  - name: lon
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.lon
    package: azure-maps-rest
    summary: Longitude where results should be biased. E.g. -121.89
    fullName: lon
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'lon?: number'
      return:
        type: number
        description: ''
  - name: onDownloadProgress
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.onDownloadProgress
    package: azure-maps-rest
    summary: Callback which fires upon download progress.
    fullName: onDownloadProgress
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onDownloadProgress?: (progress: TransferProgressEvent) => void'
      return:
        type: '(progress: TransferProgressEvent) =&gt; void'
        description: ''
  - name: onUploadProgress
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.onUploadProgress
    package: azure-maps-rest
    summary: Callback which fires upon upload progress.
    fullName: onUploadProgress
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onUploadProgress?: (progress: TransferProgressEvent) => void'
      return:
        type: '(progress: TransferProgressEvent) =&gt; void'
        description: ''
  - name: openingHours
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.openingHours
    package: azure-maps-rest
    summary: >-
      Opening hours for a POI (Points of Interest). The availability of opening
      hours will vary

      based on the data available. Possible values include: 'nextSevenDays'
    fullName: openingHours
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'openingHours?: OpeningHours'
      return:
        type: <xref uid="azure-maps-rest.atlas.service.Models.OpeningHours" />
        description: ''
  - name: radius
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.radius
    package: azure-maps-rest
    summary: >-
      The radius in meters to for the results to be constrained to the defined
      area
    fullName: radius
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'radius?: number'
      return:
        type: number
        description: ''
  - name: timeout
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.timeout
    package: azure-maps-rest
    summary: >-
      The number of milliseconds a request can take before automatically being
      terminated.
    fullName: timeout
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'timeout?: number'
      return:
        type: number
        description: ''
  - name: topLeft
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.topLeft
    package: azure-maps-rest
    summary: 'Top left position of the bounding box. E.g. 37.553,-122.453'
    fullName: topLeft
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'topLeft?: string'
      return:
        type: string
        description: ''
  - name: typeahead
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.typeahead
    package: azure-maps-rest
    summary: >-
      Boolean. If the typeahead flag is set, the query will be interpreted as a
      partial input and

      the search will enter predictive mode
    fullName: typeahead
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'typeahead?: boolean'
      return:
        type: boolean
        description: ''
  - name: view
    uid: >-
      azure-maps-rest.atlas.service.Models.SearchGetSearchPOICategoryOptionalParams.view
    package: azure-maps-rest
    summary: >
      The View parameter specifies which set of geopolitically disputed content
      is returned via

      Azure Maps services, including  borders and labels displayed on the map.
      The View parameter

      (also referred to as “user region parameter”) will show the  correct maps
      for that

      country/region. By default, the View parameter is set to “Unified” even if
      you haven’t defined

      it in  the request. It is your responsibility to determine the location of
      your users, and

      then set the View parameter correctly  for that location. Alternatively,
      you have the option

      to set ‘View=Auto’, which will return the map data based on the IP 
      address of the request.

      The View parameter in Azure Maps must be used in compliance with
      applicable laws, including

      those  regarding mapping, of the country where maps, images and other data
      and third party

      content that you are authorized to  access via Azure Maps is made
      available. Example: view=IN.

      Please refer to [Supported
      Views](https://aka.ms/AzureMapsLocalizationViews) for details and

      to see the available Views.
    fullName: view
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'view?: string'
      return:
        type: string
        description: ''
extends: RequestOptionsBase
