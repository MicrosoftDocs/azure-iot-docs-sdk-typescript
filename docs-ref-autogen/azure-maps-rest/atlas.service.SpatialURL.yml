### YamlMime:TSType
name: SpatialURL
uid: azure-maps-rest.atlas.service.SpatialURL
package: azure-maps-rest
summary: A SpatialURL represents a URL to the Azure Maps spatial operations.
fullName: SpatialURL
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'SpatialURL(Pipeline, string)'
    uid: azure-maps-rest.atlas.service.SpatialURL.constructor
    package: azure-maps-rest
    summary: Creates an instance of SpatialURL.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new SpatialURL(pipeline: Pipeline, mapsUrl?: string)'
      parameters:
        - id: pipeline
          type: <xref uid="azure-maps-rest.atlas.service.Pipeline" />
          description: |-
            Call MapsURL.newPipeline() to create a default
            pipeline, or provide a customized pipeline.
        - id: mapsUrl
          type: string
          description: >-
            A URL string pointing to Azure Maps service, default is

            `"https://atlas.microsoft.com"`.

            If no protocol is specified, e.g. `"atlas.microsoft.com"`, then
            `https` will be assumed.
properties:
  - name: mapsUrl
    uid: azure-maps-rest.atlas.service.SpatialURL.mapsUrl
    package: azure-maps-rest
    summary: Base URL string value.
    fullName: mapsUrl
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'mapsUrl: string'
      return:
        type: string
        description: ''
methods:
  - name: 'getBuffer(Aborter, string | SpatialFeatureCollection, number[])'
    uid: azure-maps-rest.atlas.service.SpatialURL.getBuffer
    package: azure-maps-rest
    summary: >
      Returns a FeatureCollection where each Feature is a buffer around the
      corresponding

      indexed Feature of the input. The buffer could be either on the outside or
      the inside of the

      provided Feature, depending on the distance provided in the input. There
      must be either one

      distance provided per Feature in the FeatureCollection  input, or if only
      one distance is

      provided, then that distance is applied to every Feature in the
      collection. The positive (or

      negative) buffer of a geometry is defined as the Minkowski sum (or
      difference) of the geometry

      with a circle of radius equal to the absolute value of the buffer
      distance. The buffer API

      always returns a polygonal result. The negative or zero-distance buffer of
      lines and points is

      always an empty polygon. The input features are provided in the request or

      by a GeoJSON file which is uploaded via [Data Upload
      API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)

      and referenced by a unique udid. The data may contain a collection of
      Point, MultiPoint,

      Polygon, MultiPolygon, LineString and MultiLineString. GeometryCollection
      will be ignored if

      provided.

      If directly providing the `FeatureCollection` uses the Post Buffer API:
      https://docs.microsoft.com/rest/api/maps/spatial/postbuffer


      Otherwise uses the Get Buffer API:
      https://docs.microsoft.com/rest/api/maps/spatial/getbuffer
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBuffer(aborter: Aborter, udidOrFeatureCollection: string |
        SpatialFeatureCollection, distances: number[])
      parameters:
        - id: aborter
          type: <xref uid="azure-maps-rest.atlas.service.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),

            goto documents of Aborter for more examples about request
            cancellation.
        - id: udidOrFeatureCollection
          type: >-
            string | <xref
            uid="azure-maps-rest.atlas.service.SpatialFeatureCollection" />
          description: >2-

             A `FeatureCollection` containing the inputs or the unique id returned from [Data Upload
            API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)
            after uploading a valid

            GeoJSON FeatureCollection object.  Please refer to [RFC

            7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.
            All the feature's properties

            should contain `geometryId`, which is used for identifying the
            geometry and is case-sensitive.
        - id: distances
          type: 'number[]'
          description: >-
            The list of distances (one per feature or one for all features).

            Positive distance will generate a buffer outside of the

            feature, whereas negative distance will generate a buffer inside of
            the feature. If the negative

            distance larger than the geometry itself, an empty polygon will be
            returned.
      return:
        type: >-
          Promise&lt;<xref uid="azure-maps-rest.atlas.service.GetBufferResponse"
          />&gt;
        description: ''
  - name: >-
      getClosestPoint(Aborter, GeoJSON.Position, string |
      SpatialFeatureCollection, GetClosestPointOptions)
    uid: azure-maps-rest.atlas.service.SpatialURL.getClosestPoint
    package: azure-maps-rest
    summary: >
      Returns the closest point between a base point and a given set of points
      provided

      by user data in the request or in a user uploaded data set identified by
      udid.

      If using a udid the set of target points is provided by a GeoJSON file

      which is uploaded via [Data Upload

      API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)
      and referenced by a

      unique udid. The GeoJSON file may only contain a collection of Point
      geometry. MultiPoint or

      other geometries will be ignored if provided. The maximum number of points
      accepted is 100,000.

      The algorithm does not take into account routing or traffic. Information
      returned includes

      closest point latitude, longitude, and distance in meters from the closest
      point.

      If directly providing the `FeatureCollection` uses the Post Closest Point
      API: https://docs.microsoft.com/rest/api/maps/spatial/postclosestpoint


      Otherwise uses the Get Closest Point API:
      https://docs.microsoft.com/rest/api/maps/spatial/getclosestpoint
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getClosestPoint(aborter: Aborter, position: GeoJSON.Position,
        udidOrFeatureCollection: string | SpatialFeatureCollection, options?:
        GetClosestPointOptions)
      parameters:
        - id: aborter
          type: <xref uid="azure-maps-rest.atlas.service.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),

            goto documents of Aborter for more examples about request
            cancellation.
        - id: position
          type: <xref uid="GeoJSON.Position" />
          description: The base point.
        - id: udidOrFeatureCollection
          type: >-
            string | <xref
            uid="azure-maps-rest.atlas.service.SpatialFeatureCollection" />
          description: >-

            A `FeatureCollection` containing the target points or the unique id
            returned from [Data Upload

            API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)
            after uploading a valid

            GeoJSON FeatureCollection object.  Please refer to [RFC

            7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.
            All the feature's properties

            should contain `geometryId`, which is used for identifying the
            geometry and is case-sensitive.
        - id: options
          type: <xref uid="azure-maps-rest.atlas.service.GetClosestPointOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="azure-maps-rest.atlas.service.GetClosesPointResponse" />&gt;
        description: ''
  - name: >-
      getGeofence(Aborter, string, string | SpatialFeatureCollection,
      GeoJSON.Position, GetGeofenceOptions)
    uid: azure-maps-rest.atlas.service.SpatialURL.getGeofence
    package: azure-maps-rest
    summary: "Retrieves the proximity of a coordinate to a\ngeofence provided in the request or that has been uploaded to the Data service. You can use the\n[Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) to upload\na geofence or set of fences. See [Geofencing GeoJSON\ndata](https://docs.microsoft.com/en-us/azure/azure-maps/geofence-geojson)\nfor more details on the geofence data format. To query the proximity of a coordinate, you supply\nthe location of the object you are tracking as well\nas the ID for the fence or set of fences, and the response will contain information about\nthe distance from the outer edge of the geofence. A negative value signifies that the\ncoordinate is inside of the fence while a positive value means that it is outside of the\nfence. This API can be used for a variety of scenarios that include things like asset\ntracking, fleet management, or setting up alerts for moving objects.\nThe API supports [integration with Event\nGrid](https://docs.microsoft.com/azure/azure-maps/azure-maps-event-grid-integration). The\nisAsync parameter is used to enable integration with Event Grid (disabled by default).\nTo test this API, you can upload the sample data from Post Geofence API examples(Request Body)\nvia Data Upload API and replace the [udid] from the sample request below with the udid returned\nby Data Upload API.\n\nIf directly providing the geofence uses the Post Geofence API: https://docs.microsoft.com/rest/api/maps/spatial/postgeofence\n\nOtherwise uses the Get Geofence API: https://docs.microsoft.com/en-us/rest/api/maps/spatial/getgeofence\n\n### Geofencing InnerError code\n\nIn geofencing response error contract, `innererror` is  an object containing service specific\ninformation about the error. `code` is a property in `innererror` which can map to a specific\ngeofencing error type. The table belows shows the code mapping between all the known client\nerror type to the corresponding geofencing error `message`.\n\ninnererror.code | error.message\n---------------------------- | --------------------------------------\nNullDeviceId  | Device Id should not be null.\nNullUdid\t  | Udid should not be null.\nUdidWrongFormat| Udid should be acquired from user data ingestion API.\nInvalidUserTime| Usertime is invalid.\nInvalidSearchBuffer| Searchbuffer is invalid.\nInvalidSearchRange| The value range of searchbuffer should be from 0 to 500 meters.\nInvalidLatLon| Lat and/or lon parameters are invalid.\nInvalidIsAsyncValue| The IsAsync parameter is invalid.\nInvalidModeValue| The mode parameter invalid.\nInvalidJson| Geofencing data is not a valid json file.\nNotSupportedGeoJson| Geofencing data can't be read as a Feature or FeatureCollections.\nInvalidGeoJson| Geofencing data is invalid.\nNoUserDataWithAccountOrSubscription| Can't find user geofencing data with provided account-id\nand/or subscription-id.\nNoUserDataWithUdid|\tCan't find user geofencing data with provided udId."
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getGeofence(aborter: Aborter, deviceId: string,
        udidOrFeatureCollection: string | SpatialFeatureCollection, position:
        GeoJSON.Position, options?: GetGeofenceOptions)
      parameters:
        - id: aborter
          type: <xref uid="azure-maps-rest.atlas.service.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),

            goto documents of Aborter for more examples about request
            cancellation.
        - id: deviceId
          type: string
          description: ID of the device
        - id: udidOrFeatureCollection
          type: >-
            string | <xref
            uid="azure-maps-rest.atlas.service.SpatialFeatureCollection" />
          description: >-

            A `FeatureCollection` containing the fence or the unique id returned
            from [Data Upload

            API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)
            after uploading a valid

            GeoJSON FeatureCollection object. Please refer to [RFC

            7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.
            All the feature's

            properties should contain `geometryId`, which is used for
            identifying the geometry and is

            case-sensitive.
        - id: position
          type: <xref uid="GeoJSON.Position" />
          description: The location being passed.
        - id: options
          type: <xref uid="azure-maps-rest.atlas.service.GetGeofenceOptions" />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="azure-maps-rest.atlas.service.GetGeofenceResponse" />&gt;
        description: ''
  - name: 'getGreatCircleDistance(Aborter, Object)'
    uid: azure-maps-rest.atlas.service.SpatialURL.getGreatCircleDistance
    package: azure-maps-rest
    summary: >
      Return the great-circle or shortest distance between two points on the
      surface of

      a sphere, measured along the surface of the sphere.  This differs from
      calculating a straight

      line through the sphere's interior. This method is helpful for estimating
      travel distances for

      airplanes by calculating the shortest distance between airports.

      Uses the Get Great Circle Distance API:
      https://docs.microsoft.com/rest/api/maps/spatial/getgreatcircledistance
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getGreatCircleDistance(aborter: Aborter, coordinates: Object)'
      parameters:
        - id: aborter
          type: <xref uid="azure-maps-rest.atlas.service.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),

            goto documents of Aborter for more examples about request
            cancellation.
        - id: coordinates
          type: Object
          description: >-
            The coordinates through which the distance is calculated. Two

            coordinates are required. The first one is the source point
            coordinate and the last is the

            target point coordinate.
      return:
        type: >-
          Promise&lt;<xref
          uid="azure-maps-rest.atlas.service.GetGreatCircleDistance" />&gt;
        description: ''
  - name: >-
      getPointInPolygon(Aborter, string | SpatialFeatureCollection,
      GeoJSON.Position)
    uid: azure-maps-rest.atlas.service.SpatialURL.getPointInPolygon
    package: azure-maps-rest
    summary: >
      Returns whether a point is inside a set of polygons. The set

      of polygons is provided in the request or by a GeoJSON file which is
      uploaded via [Data Upload

      API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)
      and referenced by a

      unique udid. The GeoJSON file may contain Polygon and MultiPolygon
      geometries, other geometries

      will be ignored if provided. If the point is inside or on the boundary of
      one of these polygons,

      the value returned is true. In all other cases, the value returned is
      false. When the point is

      inside multiple polygons, the result will give intersecting geometries
      section to show all valid

      geometries(referenced by geometryId) in user data. The maximum number of
      vertices accepted to

      form a Polygon is 10,000.

      If directly providing the `FeatureCollection` uses the Post Point In
      Polygon API:
      https://docs.microsoft.com/rest/api/maps/spatial/postpointinpolygon


      Otherwise uses the Get Point In Polygon API:
      https://docs.microsoft.com/rest/api/maps/spatial/getpointinpolygon
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPointInPolygon(aborter: Aborter, udidOrFeatureCollection:
        string | SpatialFeatureCollection, position: GeoJSON.Position)
      parameters:
        - id: aborter
          type: <xref uid="azure-maps-rest.atlas.service.Aborter" />
          description: >-
            Create a new Aborter instance with Aborter.none or
            Aborter.timeout(),

            goto documents of Aborter for more examples about request
            cancellation.
        - id: udidOrFeatureCollection
          type: >-
            string | <xref
            uid="azure-maps-rest.atlas.service.SpatialFeatureCollection" />
          description: >-

            A `FeatureCollection` containing the polygons or the unique id
            returned from [Data Upload

            API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)
            after uploading a valid

            GeoJSON FeatureCollection object.  Please refer to [RFC

            7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.
            All the feature's properties

            should contain `geometryId`, which is used for identifying the
            geometry and is case-sensitive.
        - id: position
          type: <xref uid="GeoJSON.Position" />
          description: The base point.
      return:
        type: >-
          Promise&lt;<xref
          uid="azure-maps-rest.atlas.service.GetPointInPolygonResponse" />&gt;
        description: ''
  - name: 'newPipeline(Credential, INewPipelineOptions)'
    uid: azure-maps-rest.atlas.service.SpatialURL.newPipeline
    package: azure-maps-rest
    summary: >-
      A static method used to create a new Pipeline object with Credential
      provided.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function newPipeline(credential: Credential, pipelineOptions?:
        INewPipelineOptions)
      parameters:
        - id: credential
          type: <xref uid="azure-maps-rest.atlas.service.Credential" />
          description: >-
            Such as SubscriptionKeyCredential, TokenCredential, and
            MapControlCredential.
        - id: pipelineOptions
          type: <xref uid="azure-maps-rest.atlas.service.INewPipelineOptions" />
          description: ''
      return:
        type: <xref uid="azure-maps-rest.atlas.service.Pipeline" />
        description: A new Pipeline object.
extends: <xref uid="azure-maps-rest.atlas.service.MapsURL" />
